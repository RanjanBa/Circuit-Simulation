//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Core/ChipCreatorActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ChipCreatorActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ChipCreatorActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ChipCreatorActions"",
    ""maps"": [
        {
            ""name"": ""Action map"",
            ""id"": ""91c8bfa0-98e4-45f5-83b0-36af714c8ec1"",
            ""actions"": [
                {
                    ""name"": ""Toggle Pin Display Name"",
                    ""type"": ""Button"",
                    ""id"": ""648fc816-1999-49c3-984e-50d3d271f431"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0a07af0-6c78-4b49-9971-509559dabc05"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Pin Display Name"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Action map
        m_Actionmap = asset.FindActionMap("Action map", throwIfNotFound: true);
        m_Actionmap_TogglePinDisplayName = m_Actionmap.FindAction("Toggle Pin Display Name", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action map
    private readonly InputActionMap m_Actionmap;
    private List<IActionmapActions> m_ActionmapActionsCallbackInterfaces = new List<IActionmapActions>();
    private readonly InputAction m_Actionmap_TogglePinDisplayName;
    public struct ActionmapActions
    {
        private @ChipCreatorActions m_Wrapper;
        public ActionmapActions(@ChipCreatorActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TogglePinDisplayName => m_Wrapper.m_Actionmap_TogglePinDisplayName;
        public InputActionMap Get() { return m_Wrapper.m_Actionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionmapActions set) { return set.Get(); }
        public void AddCallbacks(IActionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionmapActionsCallbackInterfaces.Add(instance);
            @TogglePinDisplayName.started += instance.OnTogglePinDisplayName;
            @TogglePinDisplayName.performed += instance.OnTogglePinDisplayName;
            @TogglePinDisplayName.canceled += instance.OnTogglePinDisplayName;
        }

        private void UnregisterCallbacks(IActionmapActions instance)
        {
            @TogglePinDisplayName.started -= instance.OnTogglePinDisplayName;
            @TogglePinDisplayName.performed -= instance.OnTogglePinDisplayName;
            @TogglePinDisplayName.canceled -= instance.OnTogglePinDisplayName;
        }

        public void RemoveCallbacks(IActionmapActions instance)
        {
            if (m_Wrapper.m_ActionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionmapActions @Actionmap => new ActionmapActions(this);
    public interface IActionmapActions
    {
        void OnTogglePinDisplayName(InputAction.CallbackContext context);
    }
}
